#ifndef _FAT32_PARTITION_MANAGER_H_
#define _FAT32_PARTITION_MANAGER_H_

#include "platform_types.h"

typedef struct _FAT32_PARTITION_MANAGER FAT32_PARTITION_MANAGER;

typedef struct _FAT32_PARTITION_MANAGER_INTERNAL FAT32_PARTITION_MANAGER_INTERNAL;

typedef STATUS(API *FAT32_PARTITION_MANAGER_GET_PARTITION_NAME)(
    FAT32_PARTITION_MANAGER *Fat32PartitionManager,
    OUT CHAR16 *PartitionName);

typedef STATUS(API *FAT32_PARTITION_MANAGER_CREATE_DIRECTORY)(
    FAT32_PARTITION_MANAGER *Fat32PartitionManager,
    IN CONST CHAR16 *DirectoryPath);

typedef STATUS(API *FAT32_PARTITION_MANAGER_OPEN_DIRECTORY)(
    FAT32_PARTITION_MANAGER *Fat32PartitionManager,
    IN CONST CHAR16 *DirectoryPath,
    OUT HANDLE *Directory);

typedef STATUS(API *FAT32_PARTITION_MANAGER_CLOSE_DIRECTORY)(
    FAT32_PARTITION_MANAGER *Fat32PartitionManager,
    IN OUT HANDLE *Directory);

typedef STATUS(API *FAT32_PARTITION_MANAGER_READ_DIRECTORY_ENTRY)(
    FAT32_PARTITION_MANAGER *Fat32PartitionManager,
    IN OUT HANDLE Directory,
    OUT DIRECTORY_CONTENT **DirectoryContent);

typedef STATUS(API *FAT32_PARTITION_MANAGER_REMOVE_DIRECTORY)(
    FAT32_PARTITION_MANAGER *Fat32PartitionManager,
    IN CONST CHAR16 *DirectoryPath);

typedef STATUS(API *FAT32_PARTITION_MANAGER_CREATE_FILE)(
    FAT32_PARTITION_MANAGER *Fat32PartitionManager,
    IN CONST CHAR16 *FilePath);

typedef STATUS(API *FAT32_PARTITION_MANAGER_OPEN_FILE)(
    FAT32_PARTITION_MANAGER *Fat32PartitionManager,
    IN CONST CHAR16 *FilePath,
    OUT HANDLE *File);

typedef STATUS(API *FAT32_PARTITION_MANAGER_CLOSE_FILE)(
    FAT32_PARTITION_MANAGER *Fat32PartitionManager,
    IN OUT HANDLE *File);

typedef STATUS(API *FAT32_PARTITION_MANAGER_READ_FILE)(
    FAT32_PARTITION_MANAGER *Fat32PartitionManager,
    IN OUT HANDLE File,
    OUT UINT8 *Buffer,
    IN OUT UINT64 *BufferSize);

typedef STATUS(API *FAT32_PARTITION_MANAGER_WRITE_FILE)(
    FAT32_PARTITION_MANAGER *Fat32PartitionManager,
    IN OUT HANDLE File,
    IN CONST UINT8 *Buffer,
    IN OUT UINT64 *BufferSize);

typedef STATUS(API *FAT32_PARTITION_MANAGER_REMOVE_FILE)(
    FAT32_PARTITION_MANAGER *Fat32PartitionManager,
    IN CONST CHAR16 *FilePath);

typedef struct _FAT32_PARTITION_MANAGER
{
    FAT32_PARTITION_MANAGER_INTERNAL *Internal;
    FAT32_PARTITION_MANAGER_GET_PARTITION_NAME GetPartitionName;
    FAT32_PARTITION_MANAGER_CREATE_DIRECTORY CreateDirectory;
    FAT32_PARTITION_MANAGER_OPEN_DIRECTORY OpenDirectory;
    FAT32_PARTITION_MANAGER_CLOSE_DIRECTORY CloseDirectory;
    FAT32_PARTITION_MANAGER_READ_DIRECTORY_ENTRY ReadDirectoryContent;
    FAT32_PARTITION_MANAGER_REMOVE_DIRECTORY RemoveDirectory;
    FAT32_PARTITION_MANAGER_CREATE_FILE CreateFile;
    FAT32_PARTITION_MANAGER_OPEN_FILE OpenFile;
    FAT32_PARTITION_MANAGER_CLOSE_FILE CloseFile;
    FAT32_PARTITION_MANAGER_READ_FILE ReadFile;
    FAT32_PARTITION_MANAGER_WRITE_FILE WriteFile;
    FAT32_PARTITION_MANAGER_REMOVE_FILE RemoveFile;
} FAT32_PARTITION_MANAGER;

STATUS API Fat32PartitionManagerInit(IN CONST CHAR16* DevicePath,
                                     IN CONST UINT16 *PartitionName,
                                     IN CONST UINT64 StartSector,
                                     IN CONST UINT64 EndSector,
                                     OUT FAT32_PARTITION_MANAGER **Fat32PartitionManager);

#endif /* _FAT32_PARTITION_MANAGER_H_ */
