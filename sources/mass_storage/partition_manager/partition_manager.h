#ifndef _PARTITION_MANAGER_H_
#define _PARTITION_MANAGER_H_

#include "platform_types.h"

typedef struct _PARTITION_MANAGER PARTITION_MANAGER;

typedef struct _PARTITION_MANAGER_INTERNAL PARTITION_MANAGER_INTERNAL;

typedef STATUS(API *PARTITION_MANAGER_LIST_PARTITIONS)(
    PARTITION_MANAGER *PartitionManager,
    OUT CHAR16 **Partitions,
    OUT UINT64 *NumberOfPartitions);

typedef STATUS(API *PARTITION_MANAGER_CREATE_DIRECTORY)(
    PARTITION_MANAGER *PartitionManager,
    IN CONST CHAR16 *DirectoryPath);

typedef STATUS(API *PARTITION_MANAGER_OPEN_DIRECTORY)(
    PARTITION_MANAGER *PartitionManager,
    IN CONST CHAR16 *DirectoryPath,
    OUT HANDLE *Handle);

typedef STATUS(API *PARTITION_MANAGER_CLOSE_DIRECTORY)(
    PARTITION_MANAGER *PartitionManager,
    IN OUT HANDLE *Handle);

typedef STATUS(API *PARTITION_MANAGER_READ_DIRECTORY_ENTRY)(
    PARTITION_MANAGER *PartitionManager,
    IN OUT HANDLE Handle,
    OUT DIRECTORY_CONTENT **DirectoryContent);

typedef STATUS(API *PARTITION_MANAGER_REMOVE_DIRECTORY)(
    PARTITION_MANAGER *PartitionManager,
    IN CONST CHAR16 *DirectoryPath);

typedef STATUS(API *PARTITION_MANAGER_CREATE_FILE)(
    PARTITION_MANAGER *PartitionManager,
    IN CONST CHAR16 *FilePath);

typedef STATUS(API *PARTITION_MANAGER_OPEN_FILE)(
    PARTITION_MANAGER *PartitionManager,
    IN CONST CHAR16 *FilePath,
    OUT HANDLE *Handle);

typedef STATUS(API *PARTITION_MANAGER_CLOSE_FILE)(
    PARTITION_MANAGER *PartitionManager,
    IN OUT HANDLE *Handle);

typedef STATUS(API *PARTITION_MANAGER_READ_FILE)(
    PARTITION_MANAGER *PartitionManager,
    IN OUT HANDLE Handle,
    OUT UINT8 *Buffer,
    IN OUT UINT64 *BufferSize);

typedef STATUS(API *PARTITION_MANAGER_WRITE_FILE)(
    PARTITION_MANAGER *PartitionManager,
    IN OUT HANDLE Handle,
    IN CONST UINT8 *Buffer,
    IN OUT UINT64 *BufferSize);

typedef STATUS(API *PARTITION_MANAGER_REMOVE_FILE)(
    PARTITION_MANAGER *PartitionManager,
    IN CONST CHAR16 *FilePath);

typedef struct _PARTITION_MANAGER
{
    PARTITION_MANAGER_INTERNAL *Internal;
    PARTITION_MANAGER_LIST_PARTITIONS ListPartitions;
    PARTITION_MANAGER_CREATE_DIRECTORY CreateDirectory;
    PARTITION_MANAGER_OPEN_DIRECTORY OpenDirectory;
    PARTITION_MANAGER_CLOSE_DIRECTORY CloseDirectory;
    PARTITION_MANAGER_READ_DIRECTORY_ENTRY ReadDirectoryContent;
    PARTITION_MANAGER_REMOVE_DIRECTORY RemoveDirectory;
    PARTITION_MANAGER_CREATE_FILE CreateFile;
    PARTITION_MANAGER_OPEN_FILE OpenFile;
    PARTITION_MANAGER_CLOSE_FILE CloseFile;
    PARTITION_MANAGER_READ_FILE ReadFile;
    PARTITION_MANAGER_WRITE_FILE WriteFile;
    PARTITION_MANAGER_REMOVE_FILE RemoveFile;
} PARTITION_MANAGER;

STATUS API PartitionManagerInit(CONST CHAR16 *DevicePath, OUT PARTITION_MANAGER **PartitionManager);

#endif /* _PARTITION_MANAGER_H_ */
